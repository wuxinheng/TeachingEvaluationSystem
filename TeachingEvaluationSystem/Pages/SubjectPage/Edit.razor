@page "/subjectpage/edit/{id?}"
@using TeachingEvaluationSystem.Data;
@using Microsoft.AspNetCore.Components.Forms
@inject QuestionBankService QuestionBankService
@inject SubjectService SubjectService
@inject NavigationManager NavigationManager
@inject IJSRuntime JS

<div class="mb-3">
    <label for="exampleInputEmail1" class="form-label">名称</label>
    <input type="text" class="form-control" id="exampleInputEmail1" aria-describedby="emailHelp" @bind="@Subject.Name">
</div>
<div class="mb-3">
    <label for="exampleInputEmail1" class="form-label">考核总分</label>
    <input type="nu" class="form-control" id="exampleInputEmail1" aria-describedby="emailHelp" @bind="@Subject.GrossScore">
</div>
<div class="mb-3">
    <label for="exampleInputEmail1" class="form-label">题库</label>

    @if (Questions.Any())
    {
        var typeName = Questions[0].QuestionType?.Name;
        foreach (var item in Questions)
        {
            int index = Questions.IndexOf(item);
            if (index != 0 && typeName != Questions[index].QuestionType.Name)
            {
                typeName = Questions[index].QuestionType.Name;
                <nav aria-label="breadcrumb">
                    <ol class="breadcrumb">
                        <li class="breadcrumb-item active" aria-current="page">考核项{<b>@typeName</b>}   总分中占比{<b>@(item.QuestionType.Weight * 100)%</b>}</li>
                    </ol>
                </nav>

            }
            else if (index == 0)
            {
                <nav aria-label="breadcrumb">
                    <ol class="breadcrumb">
                        <li class="breadcrumb-item active" aria-current="page">考核项{<b>@typeName</b>}   总分中占比{<b>@(item.QuestionType.Weight * 100)%</b>}</li>
                    </ol>
                </nav>

            }
            <div class="form-check">
                <input class="form-check-input" type="checkbox" @bind="@item.Check" id="@item.Tile+@item.Id">
                <label class="form-check-label" for="@item.Tile+@item.Id">
                    @item.Tile
                </label>
            </div>
        }
    }


</div>
<button class="btn btn-primary" @onclick="Save">保存</button>

@code {

    [Parameter]
    public string? Id { get; set; }

    public string? ConfirmPassword { get; set; }
    public List<TeachingEvaluationSystem.DB.Entitys.QuestionBank>? Questions { get; set; }
    public Edit()
    {
        Subject = new DB.Entitys.Subject();
    }
    public TeachingEvaluationSystem.DB.Entitys.Subject? Subject { get; set; }

    public async Task Save()
    {
        var questions = Questions.Where(x => x.Check == true).ToList();
        Subject.Questions = new List<DB.Entitys.QuestionBankSubject>();
        foreach (var item in questions)
        {
            // 总分*考核项=考核项题目总分
            var questionTypeGrossScore = Subject.GrossScore * item.QuestionType.Weight;
            // 考核项题目总分/考核项题目=平均分
            var questionScore = questionTypeGrossScore / questions.Count(x => x.QuestionTypeId == item.QuestionTypeId);
            Subject.Questions.Add(new DB.Entitys.QuestionBankSubject() { QuestionBank = item, Subject = Subject, Score = Convert.ToInt32(questionScore) });
        }
        var totalScore = Subject.Questions.Sum(x => x.Score);
        if (totalScore > 100)
        {
            // TODO 不严谨，可以循环扣除
            var noun = totalScore - 100;
            Subject.Questions.First().Score -= noun;
        }
        else if (totalScore < 100)
        {
            var noun = 100 - totalScore;
            Subject.Questions.First().Score += noun;
        }
        var isSuccess = await SubjectService.Save(Subject);
        if (isSuccess)
        {
            await JS.InvokeVoidAsync("alert", "保存成功！");
            NavigationManager.NavigateTo("/subjectpage/index", false);
        }
        else
        {
            await JS.InvokeVoidAsync("alert", "保存失败！");
        }


    }

    protected override async Task OnInitializedAsync()
    {

        var id = string.IsNullOrWhiteSpace(Id) ? 0 : int.Parse(Id);
        Subject = await SubjectService.Get(id);
        if (Subject == null)
        {
            Subject = new DB.Entitys.Subject();
        }
        Questions = await QuestionBankService.GetList();
        Questions = Questions.OrderBy(x => x.QuestionTypeId).ToList();
        foreach (var item in Questions)
        {

            var questions = Subject.Questions.FirstOrDefault(x => x.QuestionBank.Id == item.Id);
            if (questions == null)
            {
                item.Check = false;
            }
            else
            {
                item.Check = true;
            }

        }
    }
}
