@page "/userclasspage/edit/{classid?}/{userid?}"

@using Microsoft.AspNetCore.Components.Forms

@inject UserClassesService UserClassesService
@inject SubjectService SubjectService
@inject NavigationManager NavigationManager
@inject IJSRuntime JS

<div class="mb-3">
    <label for="exampleInputEmail1" class="form-label">用户名</label>
    <input type="text" class="form-control" id="exampleInputEmail1" aria-describedby="emailHelp" @bind="@UserClasses.User.Name" readonly>
</div>
<div class="mb-3">
    <label for="exampleInputEmail1" class="form-label">班级</label>
    <input type="text" class="form-control" id="exampleInputEmail1" aria-describedby="emailHelp" @bind="@UserClasses.Classes.Name" readonly>
</div>
<div class="mb-3">
    <label for="exampleInputEmail1" class="form-label">科目</label>

    @if (Subjects != null)
    {
        foreach (var item in Subjects)
        {
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" @bind="@item.Check" id="@item.Name+@item.Id">
                        <label class="form-check-label" for="@item.Name+@item.Id">
                    @item.Name
                        </label>
                    </div>
        }
    }


</div>

<button class="btn btn-primary" @onclick="Save">保存</button>

@code {

    [Parameter]
    public string? ClassId { get; set; }
    [Parameter] public string? UserId { get; set; }

    public string? ConfirmPassword { get; set; }

    public Edit()
    {
        UserClasses = new DB.Entitys.UserClass();
    }
    public TeachingEvaluationSystem.DB.Entitys.UserClass? UserClasses { get; set; }
    public List<TeachingEvaluationSystem.DB.Entitys.Subject>? Subjects { get; set; } = new List<DB.Entitys.Subject>();

    public async Task Save()
    {
        UserClasses.Subjects = Subjects.Where(x => x.Check).ToList();
        var isSuccess = await UserClassesService.Save(UserClasses);
        if (isSuccess)
        {
            await JS.InvokeVoidAsync("alert", "保存成功！");
            NavigationManager.NavigateTo("/class/index", false);
        }
        else
        {
            await JS.InvokeVoidAsync("alert", "保存失败！");
        }


    }

    protected override async Task OnInitializedAsync()
    {


        var classid = string.IsNullOrWhiteSpace(ClassId) ? 0 : int.Parse(ClassId);
        var userid = string.IsNullOrWhiteSpace(UserId) ? 0 : int.Parse(UserId);
        UserClasses = await UserClassesService.Get(classid, userid);
        if (UserClasses == null)
        {
            UserClasses = new DB.Entitys.UserClass();
        }
        Subjects = await SubjectService.GetList();

        foreach (var item in Subjects)
        {
            var menu = UserClasses.Subjects.FirstOrDefault(x => x.Id == item.Id);
            if (menu == null)
            {
                item.Check = false;
            }
            else
            {
                item.Check = true;
            }

        }
    }
}
