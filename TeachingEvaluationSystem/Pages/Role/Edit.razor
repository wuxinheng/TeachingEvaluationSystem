@page "/role/edit/{id?}"
@using TeachingEvaluationSystem.Data;
@using Microsoft.AspNetCore.Components.Forms

@inject RoleService RoleService
@inject MenuService MenuService
@inject QuestionBankService QuestionBankService
@inject NavigationManager NavigationManager
@inject IJSRuntime JS

<div class="mb-3">
    <label for="exampleInputEmail1" class="form-label">名称</label>
    <input type="text" class="form-control" id="exampleInputEmail1" aria-describedby="emailHelp" @bind="@Role.Name">
</div>
<div class="mb-3">
    <label for="exampleInputEmail1" class="form-label">备注</label>
    <input type="email" class="form-control" id="exampleInputEmail1" aria-describedby="emailHelp" @bind="@Role.Description">
</div>
<div class="mb-3">
    <label for="exampleInputEmail1" class="form-label">菜单</label>

    @if (Menus != null)
    {
        foreach (var item in Menus)
        {
            <div class="form-check">
                <input class="form-check-input" type="checkbox" @bind="@item.Check" id="@item.Name+@item.Id">
                <label class="form-check-label" for="@item.Name+@item.Id">
                    @item.Name
                </label>
            </div>
        }
    }


</div>
<div class="mb-3">
    <label for="exampleInputEmail1" class="form-label">题库</label>

    @if (Questions != null)
    {
        foreach (var item in Questions)
        {
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" @bind="@item.Check" id="@item.Tile+@item.Id">
                        <label class="form-check-label" for="@item.Tile+@item.Id">
                    @item.Tile
                        </label>
                    </div>
        }
    }


</div>
<button class="btn btn-primary" @onclick="Save">保存</button>

@code {

    [Parameter]
    public string? Id { get; set; }
    public Edit()
    {
        Role = new DB.Entitys.Role();
    }
    public TeachingEvaluationSystem.DB.Entitys.Role? Role { get; set; }
    public List<TeachingEvaluationSystem.DB.Entitys.Menu>? Menus { get; set; }
    public List<TeachingEvaluationSystem.DB.Entitys.QuestionBank>? Questions { get; set; }
    public async Task Save()
    {
        Role.Menus = Menus.Where(x => x.Check == true).ToList();
        Role.Questions = Questions.Where(x => x.Check == true).ToList();

        var isSuccess = await RoleService.Save(Role);
        if (isSuccess)
        {
            await JS.InvokeVoidAsync("alert", "保存成功！");
            NavigationManager.NavigateTo("/role/index", false);
        }
        else
        {
            await JS.InvokeVoidAsync("alert", "保存失败！");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var id = string.IsNullOrWhiteSpace(Id) ? 0 : int.Parse(Id);
        Role = await RoleService.Get(id);
        if (Role == null)
        {
            Role = new DB.Entitys.Role();
        }
        Menus = await MenuService.GetList();
        Questions =await QuestionBankService.GetList();
        foreach (var item in Menus)
        {
            var menu = Role.Menus.FirstOrDefault(x => x.Id == item.Id);
            if (menu == null)
            {
                item.Check = false;
            }
            else
            {
                item.Check = true;
            }

        }
    }
}
